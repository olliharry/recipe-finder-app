// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    preferences   Preference[]
    itineraries   Itinerary[]
    favRecipes    Recipe[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Recipe {
    id           String   @id @default(cuid())
    userId       String
    recipeID     Int
    recipeName   String
    ingredients  String[]
    instructions String[]
    recipeImage  String
    vegetarian   Boolean
    vegan        Boolean
    glutenFree   Boolean
    dairyFree    Boolean
    user         User     @relation(fields: [userId], references: [id])
}

model Preference {
    id             String   @id @default(cuid())
    userId         String
    preferenceName String
    restaurants    String[]
    activities     String[]
    user           User     @relation(fields: [userId], references: [id])
}

model Itinerary {
    id     String  @id @default(cuid())
    days   Day[]
    name   String
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Day {
    id                String     @id @default(cuid())
    activities        String
    activityAddress   String
    restaurants       String
    restaurantAddress String
    Itinerary         Itinerary? @relation(fields: [itineraryId], references: [id])
    itineraryId       String?
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}
